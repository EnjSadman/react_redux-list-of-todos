{"version":3,"sources":["store/actions.ts","store/index.ts","store/selector.ts","components/CurrentUser/CurrentUser.tsx","api/api.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionType","TodosStatus","setTodosAction","payload","type","SET_TODOS","setUserAction","SET_USER","setStatusAction","SET_STATUS","initialState","todos","user","status","all","filter","store","createStore","state","action","ADD_TODO","SET_FILTER","getTodosSelector","getUserSelector","getStatusSelector","getFilterSelector","CurrentUser","useSelector","dispatch","useDispatch","className","id","name","email","phone","onClick","BASE_URL","getTodos","a","fetch","response","json","getUserById","userId","TodoList","useState","needToUpdate","setNeedToUpdate","useEffect","loadTodosFromServer","todosFromServer","el","title","includes","completed","inProgress","getUser","userFromServer","onChange","event","setTimeout","target","value","map","todo","classNames","readOnly","checked","specify","method","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56926634.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-cycle\nimport { TodosStatus } from '.';\nimport { Todo, User } from '../react-app-env';\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface AddTodosAction {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport interface SetStatusAction {\n  type: ActionType.SET_STATUS,\n  payload: TodosStatus,\n}\n\nexport interface SetFilterAction {\n  type: ActionType.SET_FILTER,\n  payload: string,\n}\n\nexport type Action = SetTodosAction\n| AddTodosAction\n| SetUserAction\n| SetStatusAction\n| SetFilterAction;\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n  SET_STATUS = 'SET_STATUS',\n  SET_FILTER = 'SET_FILTER',\n}\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const setStatusAction = (payload: TodosStatus) : Action => ({\n  type: ActionType.SET_STATUS,\n  payload,\n});\n\nexport const setFilterAction = (payload: string) : Action => ({\n  type: ActionType.SET_FILTER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { Todo, User } from '../react-app-env';\n// eslint-disable-next-line import/no-cycle\nimport { ActionType, Action } from './actions';\n\nexport enum TodosStatus {\n  all = '0',\n  completed = '1',\n  inProgress = '2',\n}\n\nexport interface State {\n  todos: Todo[],\n  user: User | null,\n  status: TodosStatus,\n  filter: string,\n}\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n  status: TodosStatus.all,\n  filter: '',\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case ActionType.SET_FILTER:\n      return {\n        ...state,\n        filter: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { State } from './index';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n\nexport const getStatusSelector = (state: State) => state.status;\n\nexport const getFilterSelector = (state: State) => state.filter;\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selector';\nimport { setUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(setUserAction(null))}\n      >\n        clear\n      </button>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () : Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport function deleteRequest(specify : string) : Promise<Response> {\n  const result = fetch(`${BASE_URL}/${specify}`, { method: 'DELETE' });\n\n  return result;\n}\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteRequest, getTodos, getUserById } from '../../api/api';\nimport { TodosStatus } from '../../store';\nimport {\n  setTodosAction,\n  setUserAction,\n  setStatusAction,\n  setFilterAction,\n} from '../../store/actions';\nimport {\n  getFilterSelector,\n  getStatusSelector,\n  getTodosSelector,\n  getUserSelector,\n} from '../../store/selector';\n\nimport './TodoList.scss';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n  const status = useSelector(getStatusSelector);\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUserSelector);\n  const filter = useSelector(getFilterSelector);\n\n  const [needToUpdate, setNeedToUpdate] = useState(false);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      let todosFromServer = await getTodos();\n\n      todosFromServer = todosFromServer.filter(el => el.title.includes(filter));\n\n      switch (status) {\n        case TodosStatus.completed: {\n          dispatch(\n            setTodosAction(\n              todosFromServer.filter(el => el.completed === true),\n            ),\n          );\n          break;\n        }\n\n        case TodosStatus.inProgress: {\n          dispatch(\n            setTodosAction(\n              todosFromServer.filter(el => el.completed === false),\n            ),\n          );\n          break;\n        }\n\n        default: {\n          dispatch(setTodosAction(todosFromServer));\n          break;\n        }\n      }\n    };\n\n    loadTodosFromServer();\n  }, [status, filter, needToUpdate]);\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUserAction(userFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        onChange={(event) => {\n          setTimeout(() => {\n            dispatch(setFilterAction(event.target.value));\n          }, 1000);\n        }}\n      />\n      <select onChange={(event) => {\n        switch (event.target.value) {\n          case '1': {\n            dispatch(setStatusAction(TodosStatus.completed));\n            break;\n          }\n\n          case '2': {\n            dispatch(setStatusAction(TodosStatus.inProgress));\n            break;\n          }\n\n          default: {\n            dispatch(setStatusAction(TodosStatus.all));\n            break;\n          }\n        }\n      }}\n      >\n        <option value=\"0\">All Todos</option>\n        <option value=\"1\">Completed Todos</option>\n        <option value=\"2\">In progress Todos</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map((todo) => (\n            <li\n              key={todo.id}\n              className={\n                classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )\n              }\n            >\n              <label>\n                {todo.completed && (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked\n                  />\n                )}\n                {!todo.completed && (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                )}\n\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                     ((user !== null) && (user.id === todo.userId)),\n                  },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  await deleteRequest(`/todos/${todo.id}`);\n                  setNeedToUpdate(!needToUpdate);\n                }}\n              >\n                X\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}